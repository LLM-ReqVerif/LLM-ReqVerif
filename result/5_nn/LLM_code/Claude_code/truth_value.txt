#include <stddef.h>
#include <stdio.h>
#include "nn_12B.h"
#include <math.h>

// Verification control macros
//#define VERIFY_PROPERTY_1
//#define VERIFY_PROPERTY_2
//#define VERIFY_PROPERTY_3
//#define VERIFY_PROPERTY_4

// Constants for verification
#define MAX_LOOP_COUNT 200  // Updated to match data size
#define EPSILON 0.01

// Truth data structure with your provided data
double truth_data[200][3] = {
    {-0.88176467, -1.1041869, -0.13533456},
    {-1.3181215, -1.3280737, -0.075438024},
    {0.70840224, 1.7141176, -0.07823631},
    {1.6096717, 0.060923963, -0.11907106},
    {-0.59205071, 0.69345407, 0.073413738},
    {-1.5993659, 0.6712009, -0.099151846},
    {1.1720089, -1.6741543, -0.048769515},
    {-0.12627028, -1.0997061, -0.066163243},
    {0.74936483, -0.86324316, -0.083034182},
    {0.73231411, 1.6550549, -0.086009719},
    {-0.31425646, -1.0835937, -0.076423638},
    {0.6373701, -1.0055184, -0.10114107},
    {0.53370852, 0.70516302, 0.099677317},
    {0.10058404, 0.59396265, 0.44319244},
    {-1.2348742, 0.81470741, -0.13320929},
    {0.047624039, 1.3484131, -0.13287527},
    {0.99332105, 0.90918281, -0.13266141},
    {-0.32069233, -1.9222624, -0.062721293},
    {0.94991768, 0.33498592, -0.005278601},
    {0.74587094, 1.6835073, -0.080539363},
    {1.8229041, -1.633288, -0.012487204},
    {-0.76837415, 0.21824244, 0.19124142},
    {-0.63079655, 1.7232112, -0.081627815},
    {-0.45186571, -1.2021882, -0.1247947},
    {-1.8952964, 0.10127834, -0.070936555},
    {0.53418562, -1.4930436, -0.12252674},
    {0.26100424, 0.99490912, -0.020123995},
    {-0.53795435, -0.74132523, 0.069596018},
    {-0.3141652, -1.2513035, -0.12577754},
    {-0.15119891, 1.9215805, -0.066111125},
    {-0.7422449, 0.85130853, -0.076975845},
    {-1.0973532, 1.3026, -0.10449703},
    {-1.5362525, 0.73287928, -0.10468356},
    {-1.4641356, 0.75760721, -0.11341543},
    {1.7860938, 0.12350353, -0.089413607},
    {-0.030268115, -1.2445852, -0.11672764},
    {0.99285451, -0.027937173, 0.0050185458},
    {-0.75625936, 0.23815947, 0.1980465},
    {-1.9691789, 1.3131211, -0.016984201},
    {0.46248668, -1.1885256, -0.1231793},
    {-0.56970664, 0.11098488, 0.47346012},
    {0.59531628, 1.2312448, -0.13409489},
    {1.3839089, -0.57958216, -0.13171949},
    {-1.5945872, 0.19102014, -0.11975821},
    {0.35320734, 0.86975136, 0.049206519},
    {0.32952875, -1.1899505, -0.11420673},
    {0.087215043, 0.5750276, 0.47182337},
    {-0.18160068, -1.9996439, -0.053800146},
    {1.866808, 0.052707921, -0.07604945},
    {-1.2707722, 0.27931605, -0.12748217},
    {0.23756852, -1.9718532, -0.057002738},
    {0.50589796, 1.5698898, -0.11328149},
    {-1.87948, 1.3327744, -0.021320442},
    {0.56909223, 1.1006618, -0.11530108},
    {1.3526445, 1.1525425, -0.091737966},
    {-0.41945593, -0.50548168, 0.36930595},
    {-0.25063119, -1.3907521, -0.13533468},
    {-1.6604689, -0.59095879, -0.094286807},
    {0.3255099, 0.58039169, 0.35784249},
    {1.4867279, 1.727747, -0.023249672},
    {-1.1723717, -1.6267159, -0.054194028},
    {-1.6215599, 0.95511109, -0.073618202},
    {-1.2481912, -1.7789306, -0.033102067},
    {0.67134631, 1.0286339, -0.11253325},
    {0.92968362, -0.14604258, 0.047167763},
    {0.5240418, -1.8199822, -0.071613368},
    {-0.12717538, 1.368118, -0.13441899},
    {-0.74255068, -1.3411538, -0.12874587},
    {0.56586665, -1.5397043, -0.11467689},
    {0.24810758, -0.91375651, 0.042223744},
    {0.65490668, -0.74245485, 0.0074518847},
    {-1.5004918, 0.42435849, -0.12583371},
    {0.6961087, 0.70986683, 0.0042877393},
    {0.72124511, 1.950569, -0.044004199},
    {1.7204806, 1.973043, -0.0061826645},
    {1.3152788, 1.0301454, -0.10988779},
    {-1.2875986, -0.89976157, -0.12443974},
    {1.7969625, 1.816055, -0.0080872926},
    {-1.2015086, -0.3556705, -0.11859688},
    {-1.1292774, -1.1335069, -0.12059084},
    {-1.9659123, 0.51652031, -0.050284479},
    {-0.79749369, -1.9405239, -0.041694979},
    {-0.90211671, -1.8268009, -0.049623488},
    {0.3457938, -1.2789515, -0.13055725},
    {-0.41378861, -1.1981396, -0.12167737},
    {-1.2543889, 0.87743025, -0.12896813},
    {-0.42873441, -0.22852976, 0.60333805},
    {-1.3816246, 1.3819705, -0.06188713},
    {1.3292178, -0.44083959, -0.13523052},
    {-1.4009917, 1.3502088, -0.063210077},
    {0.71818381, 0.99367461, -0.11191786},
    {1.0003599, 0.33544418, -0.037199352},
    {-1.94044, -1.3577056, -0.016895092},
    {-1.431014, 0.11536074, -0.13509265},
    {-1.8773776, -0.14931638, -0.073388515},
    {1.2347821, -0.48182461, -0.13062262},
    {-1.8114162, -1.6270801, -0.013120762},
    {0.66472591, -0.96341821, -0.094025207},
    {-0.17587026, -0.65665343, 0.33883181},
    {1.2119855, -0.49955115, -0.12885015},
    {-0.56624438, -1.4149614, -0.12963445},
    {-1.8986638, -0.73292048, -0.049926348},
    {-1.1256474, -0.87509838, -0.13526372},
    {0.8436596, 1.2804945, -0.12870065},
    {0.19568315, -0.63164137, 0.36341673},
    {1.4787721, 1.4880086, -0.041715367},
    {0.95534262, -0.92788205, -0.1312978},
    {-1.5870795, 1.1017271, -0.065391595},
    {1.8857329, 0.43683598, -0.06480501},
    {0.95485043, -1.9281246, -0.035425069},
    {-1.9445697, 0.80604579, -0.040835988},
    {0.71648666, -1.9369908, -0.045870232},
    {-0.057989076, 0.73557249, 0.26430945},
    {-1.8611266, 1.5116065, -0.015133176},
    {-1.5422415, -0.27277573, -0.12501228},
    {-1.6934996, 0.52537166, -0.09243003},
    {0.43129871, 0.34416297, 0.51296731},
    {-1.0661366, -1.090355, -0.12954649},
    {-1.4319542, 1.1386187, -0.082592962},
    {0.12069279, -0.84945482, 0.12637802},
    {1.7212054, 1.6975024, -0.014033491},
    {0.46761108, -0.80609945, 0.055195509},
    {0.75956767, 0.14521275, 0.221041},
    {-1.0622965, -0.66541007, -0.11869685},
    {-1.1726246, -1.0508242, -0.12396891},
    {-1.8505349, 0.18095691, -0.07744461},
    {0.65345986, -1.5692575, -0.10505987},
    {0.029018283, -1.4513787, -0.1346092},
    {-0.056798203, -1.6222901, -0.11725819},
    {1.44678, -0.75646553, -0.11586383},
    {1.8620596, 1.2505455, -0.026329023},
    {1.0387517, 0.05423074, -0.027774441},
    {-1.0132822, 1.4659057, -0.090871716},
    {0.70506984, 1.9219488, -0.04828313},
    {1.0372218, -0.69338943, -0.11736176},
    {0.34475926, -1.1215325, -0.095081969},
    {1.2897571, 0.072894964, -0.12604999},
    {1.7073406, -0.5879766, -0.086722553},
    {0.55026751, 1.4379086, -0.12805561},
    {-1.9242485, -0.95991738, -0.035559517},
    {-1.2626375, 1.3748841, -0.076194632},
    {-1.8930372, 0.33120622, -0.067036047},
    {1.7399947, 0.87762213, -0.062726708},
    {-0.062130567, -0.62590489, 0.40690947},
    {1.1791422, -1.9629043, -0.022415287},
    {-0.17265864, -1.2302141, -0.11608345},
    {-0.023162956, 0.029551132, 0.9971834},
    {-0.29714419, -1.9030326, -0.066341291},
    {1.5670886, 0.20016576, -0.12329816},
    {1.4971405, -0.89526359, -0.097437594},
    {0.53260148, 0.78496484, 0.04073116},
    {-0.83088275, 1.5254113, -0.098715569},
    {-0.83328664, -1.9012744, -0.044489541},
    {-1.0179998, -0.63517416, -0.10421767},
    {0.81739168, -0.31437729, 0.1082278},
    {1.0984475, -1.6799554, -0.053898198},
    {1.2906142, -1.6825848, -0.038971096},
    {1.2247586, -1.710495, -0.040987673},
    {-0.98491619, 1.601364, -0.073943115},
    {1.2019994, 1.8772332, -0.027588906},
    {0.51883489, -0.43477216, 0.34262962},
    {-1.0739937, -0.74565958, -0.12838692},
    {-0.47569295, 0.21325432, 0.55494435},
    {-0.18719344, 1.1681922, -0.09859653},
    {0.0022382324, 1.1932563, -0.10205899},
    {0.16228618, 1.4530342, -0.13416503},
    {-0.61941937, 1.1918488, -0.1323757},
    {-0.83427989, -1.9744944, -0.036326636},
    {0.81411436, 1.6796055, -0.076226645},
    {1.7363137, -1.928151, -0.0068302718},
    {0.37669903, -1.8823341, -0.067382373},
    {0.37236309, 0.84580767, 0.062131575},
    {0.95492414, 0.15365675, 0.025313099},
    {-0.50942727, 0.098354322, 0.55833782},
    {-0.1869185, 0.0089597217, 0.93177355},
    {0.037502258, -1.73731, -0.09859576},
    {1.7148433, -1.0798375, -0.051141252},
    {-0.19684877, -1.5318387, -0.12753333},
    {0.54973947, 1.9590842, -0.049990102},
    {-0.16254457, -1.717934, -0.1006834},
    {0.21509784, -1.7599054, -0.092450849},
    {-1.8350694, 0.64630841, -0.063236314},
    {1.2088087, -0.62376892, -0.1336588},
    {0.68604654, -1.4859466, -0.11524682},
    {-1.1986896, 0.54854266, -0.12978213},
    {-1.9416545, 0.98595268, -0.032631692},
    {1.0526641, 1.2210692, -0.1188773},
    {0.27004704, -0.92389147, 0.02910101},
    {0.6168552, -0.26408088, 0.35044939},
    {0.53896155, -0.39277405, 0.35590564},
    {0.9373208, 0.43256936, -0.022628438},
    {1.5493063, 1.0803498, -0.07247085},
    {0.66363604, 1.7644959, -0.073076157},
    {-1.5173016, -1.4741408, -0.039572696},
    {0.85494237, -0.97710909, -0.12706844},
    {-0.21109128, -0.48675677, 0.54222747},
    {0.56392941, 1.9749428, -0.047381366},
    {0.59558451, -0.63619502, 0.11255033},
    {0.71350158, 1.5982084, -0.096421941},
    {-1.7646894, -1.0500736, -0.047434692}
};

// External variables (declared in nn_12B.h)
extern ExternalInputs rtU;
extern ExternalOutputs rtY;

void rt_OneStep(void) {
    nn_12B_step();
}

int main(int argc, const char *argv[]) {
    (void)(argc);
    (void)(argv);

    // Initialize model
    nn_12B_initialize();
    
    // Variables for derivative calculations
    double prev_x = 0.0;
    double prev_y = 0.0;
    double prev_z = 0.0;
    _Bool first_iteration = 1;
    
    int loop_count = 0;
    int data_index = 0;
    while(loop_count < MAX_LOOP_COUNT && data_index < 200) {
        // Set inputs from truth data
        rtU.x = truth_data[data_index][0];
        rtU.y = truth_data[data_index][1];
        
        // Execute one step
        rt_OneStep();
        
        // Requirement 1: Maximum Output Value
        #ifdef VERIFY_PROPERTY_1
        __ESBMC_assert(rtY.z <= 1.1, "Requirement 1: Output exceeds maximum value");
        #endif
        
        // Requirement 2: Minimum Output Value
        #ifdef VERIFY_PROPERTY_2
        __ESBMC_assert(rtY.z >= -0.2, "Requirement 2: Output below minimum value");
        #endif
        
        // Requirement 3: Spatial Derivatives Bounds
        #ifdef VERIFY_PROPERTY_3
        if (!first_iteration) {
            double dx = rtU.x - prev_x;
            double dy = rtU.y - prev_y;
            
            if (dx != 0) {
                double dz_dx = (rtY.z - prev_z) / dx;
                __ESBMC_assert(dz_dx >= -35.0 && dz_dx <= 10.0, 
                              "Requirement 3: x-derivative out of bounds");
            }
            
            if (dy != 0) {
                double dz_dy = (rtY.z - prev_z) / dy;
                __ESBMC_assert(dz_dy >= -35.0 && dz_dy <= 10.0, 
                              "Requirement 3: y-derivative out of bounds");
            }
        }
        #endif
        
        // Requirement 4: Truth Data Matching
        #ifdef VERIFY_PROPERTY_4
        // Since we're using the exact truth data, check if output matches expected z
        __ESBMC_assert(fabs(rtY.z - truth_data[data_index][2]) <= 0.01,
                      "Requirement 4: Output doesn't match truth data");
        #endif
        
        // Update previous values for next iteration
        prev_x = rtU.x;
        prev_y = rtU.y;
        prev_z = rtY.z;
        first_iteration = 0;
        
        loop_count++;
        data_index++;
    }
    
    return 0;
}

//We used nondet value which might help to lose the harness in assumption way, here is the truth value:
//but both of them would time out.
//The verification could be done if the input is passed one by one. But my current workflow does not support that since it take only C code and not taking the data part. It should be able to be implemented later, but maybe need a more complex prompt knowledge base to retreiver.
