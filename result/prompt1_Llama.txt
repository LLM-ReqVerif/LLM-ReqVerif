1. Extract from the code:
   - Key state variables and their meanings 
   - State transitions and conditions
   - Update sequences
2. For each requirement, automatically identify:
   - Relevant state variables
   - Trigger conditions
   - Expected state transitions
   - Required verification timing (in cycles)
Output format:
1. State Variable Mapping
   - Variable names
   - Possible values
   - Meanings
2. For each requirement:
   - Initial conditions
   - Input triggers
   - Expected state changes
   - Output verification
   - Timing requirements
3. Timing Considerations
   - Update sequences
   - Critical dependencies
   - Cycle requirements
Notes:
- Each global step call represents one cycle
- All state checks should be performed at cycle end
- Focus on actual code implementation details
- Check point for each time step is after the global step call
- generate for all the requirements with no general and do not summary multiply requirements in one property
- and need to keep with the same number label
Please provide a systematic analysis based purely on the provided code and requirements.
- CLEARLY label if the UnitDelay is updated after  global_step() with what value VERY IMPORTANT!!
- All input output or state need to be same with the representation way in code

Then end text generation

[requirement]
"1) Finite State Machine
Model:  ‘fsm_12B.mdl’
Description:  this model represents an abstraction of detailed design requirements for an Advanced Autopilot System interacting with an independent sensor platform.  The Finite State Machine (FSM) represents a cyber-physical system with two independent components executing in real time for the purpose of ensuring a safe automatic operation in the vicinity of hazardous obstacles.  The autopilot system, tightly integrated with the vehicle flight control computer, is responsible for commanding a safety maneuver in the event of a hazard.  The sensor is the reporting agent to the autopilot with observability on imminent danger.  When the conditions are met to allow an autopilot operation (supported and no failures) and the pilot is not manually controlling the vehicle (standby is false), the autopilot will behave normally until a maneuver is required in the event of a hazard (sensor is not good).
Input Scope
Name
#
Type
Description
Global
standby
1
Boolean
True when the pilot is in control of the vehicle
Global
apfail
2
Boolean
Failure indication from an external source
Global
supported
3
Boolean
Indication of general health of system, must be True to enable operation
Global
limits
4
Boolean
External indication to sensor on faulty condition impeding safe operation.





Output Scope
Name
#
Type
Description
Global
pullup
1
Boolean
True when the autopilot is in the MANEUVER state

Input Scope
Name
#
Type
Description
Autopilot
standby
1
Boolean
True when the pilot is in control of the vehicle
Autopilot
apfail
2
Boolean
Failure indication from an external source
Autopilot
supported
3
Boolean
Indication of general health of system, must be True to enable operation
Autopilot
good
4
Boolean
Prior sensor output.  When false indicates a detected fault.
Autopilot
state
5
Double
Autopilot State variable, Indication of prior value.





Output Scope
Name
#
Type
Description
Autopilot
MODE
1
Boolean
Autopilot internal moding discrete indicating not in transition state
Autopilot
REQUEST
2
Boolean
Autopilot internal moding discrete indicating transition to a nominal operation
Autopilot
PULL
3
Boolean
True when the autopilot is in the MANEUVER state
Autopilot
STATE
4
Integer
Autopilot State


Input Scope
Name
#
Type
Description
Sensor
mode
1
Boolean
Indication from autopilot on current mode of operation.
Sensor
request
2
Boolean
Secondary indication from autopilot on current mode of operation.
Sensor
limits
3
Boolean
External indication to sensor on faulty condition impeding safe operation.
Sensor
senstate
4
Double
Sensor State variable, Indication of prior value.
Output Scope
Name
#
Type
Description
Sensor
good
1
Boolean
False indicates an unsafe situation where a hazard may exist
Sensor
SENSTATE
2
Integer
Sensor State

Requirements:
    1. Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).   
    2. The autopilot shall change states from TRANSITION to STANDBY when the pilot is in control (standby).
    3. The autopilot shall change states from TRANSITION to NOMINAL when the system is supported and sensor data is good.
    4. The autopilot shall change states from NOMINAL to MANEUVER when the sensor data is not good.
    5. The autopilot shall change states from NOMINAL to STANDBY when the pilot is in control (standby).
    6. The autopilot shall change states from MANEUVER to STANDBY when the pilot is in control (standby) and sensor data is good.
    7. The autopilot shall change states from PULLUP to TRANSITION when the system is supported and sensor data is good.
    8. The autopilot shall change states from STANDBY to TRANSITION when the pilot is not in control (not standby).
    9. The autopilot shall change states from STANDBY to MANEUVER when a failure occurs (apfail).
    10. The sensor shall change states from NOMINAL to FAULT when limits are exceeded.
    11. The sensor shall change states from NOMINAL to TRANSITION when the autopilot is not requesting support (not request).
    12. The sensor shall change states from FAULT to TRANSITION when the autopilot is not requesting support (not request) and limits are not exceeded (not limits).
    13. The sensor shall change states from TRANSITION to NOMINAL when the autopilot is requesting support (request) and the autopilot reports the correct active mode (mode)."

[Code]
"/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * File: fsm_12B_global.c
 *
 * Code generated for Simulink model 'fsm_12B_global'.
 *
 * Model version                  : 1.70
 * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024
 * C/C++ source code generated on : Sun Nov  3 11:30:34 2024
 *
 * Target selection: ert.tlc
 * Embedded hardware selection: ARM Compatible->ARM 10
 * Code generation objectives:
 *    1. Execution efficiency
 *    2. RAM efficiency
 * Validation result: Not run
 */

#include ""fsm_12B_global.h""
#include ""rtwtypes.h""

/* Block signals and states (default storage) */
DW rtDW;

/* External inputs (root inport signals with default storage) */
ExtU rtU;

/* External outputs (root outports fed by signals with default storage) */
ExtY rtY;

/* Real-time model */
static RT_MODEL rtM_;
RT_MODEL *const rtM = &rtM_;

/* Model step function */
void fsm_12B_global_step(void)
{
  real_T rtb_UnitDelay;

  /* UnitDelay: '<S1>/Unit Delay' */
  rtb_UnitDelay = rtDW.UnitDelay_DSTATE;

  /* If: '<S4>/If' */
  if (rtb_UnitDelay == 0.0) {
    /* Outputs for IfAction SubSystem: '<S4>/Transition' incorporates:
     *  ActionPort: '<S9>/Action Port'
     */
    /* Switch: '<S9>/Switch2' incorporates:
     *  Inport: '<Root>/standby'
     *  Inport: '<Root>/supported'
     *  Logic: '<S9>/Logical Operator12'
     *  Switch: '<S9>/Switch1'
     *  UnitDelay: '<S1>/Unit Delay2'
     */
    if (rtU.standby) {
      /* Merge: '<S4>/Merge' incorporates:
       *  Constant: '<S9>/Constant1'
       */
      rtDW.Merge = 3.0;
    } else if (rtU.supported && rtDW.UnitDelay2_DSTATE) {
      /* Switch: '<S9>/Switch1' incorporates:
       *  Constant: '<S9>/Constant7'
       *  Merge: '<S4>/Merge'
       */
      rtDW.Merge = 1.0;
    } else {
      /* Merge: '<S4>/Merge' incorporates:
       *  Switch: '<S9>/Switch1'
       */
      rtDW.Merge = rtb_UnitDelay;
    }

    /* End of Switch: '<S9>/Switch2' */
    /* End of Outputs for SubSystem: '<S4>/Transition' */
  } else if (rtb_UnitDelay == 1.0) {
    /* Outputs for IfAction SubSystem: '<S4>/Nominal' incorporates:
     *  ActionPort: '<S7>/Action Port'
     */
    /* Switch: '<S7>/Switch2' incorporates:
     *  Inport: '<Root>/standby'
     *  Logic: '<S7>/Logical Operator12'
     *  Switch: '<S7>/Switch1'
     *  UnitDelay: '<S1>/Unit Delay2'
     */
    if (rtU.standby) {
      /* Merge: '<S4>/Merge' incorporates:
       *  Constant: '<S7>/Constant1'
       */
      rtDW.Merge = 3.0;
    } else if (!rtDW.UnitDelay2_DSTATE) {
      /* Switch: '<S7>/Switch1' incorporates:
       *  Constant: '<S7>/Constant7'
       *  Merge: '<S4>/Merge'
       */
      rtDW.Merge = 2.0;
    } else {
      /* Merge: '<S4>/Merge' incorporates:
       *  Switch: '<S7>/Switch1'
       */
      rtDW.Merge = 1.0;
    }

    /* End of Switch: '<S7>/Switch2' */
    /* End of Outputs for SubSystem: '<S4>/Nominal' */
  } else if (rtb_UnitDelay == 2.0) {
    /* Outputs for IfAction SubSystem: '<S4>/Maneuver' incorporates:
     *  ActionPort: '<S6>/Action Port'
     */
    /* Switch: '<S6>/Switch2' incorporates:
     *  Inport: '<Root>/standby'
     *  Inport: '<Root>/supported'
     *  Logic: '<S6>/Logical Operator1'
     *  Logic: '<S6>/Logical Operator12'
     *  Switch: '<S6>/Switch1'
     *  UnitDelay: '<S1>/Unit Delay2'
     */
    if (rtU.standby && rtDW.UnitDelay2_DSTATE) {
      /* Merge: '<S4>/Merge' incorporates:
       *  Constant: '<S6>/Constant1'
       */
      rtDW.Merge = 3.0;
    } else if (rtU.supported && rtDW.UnitDelay2_DSTATE) {
      /* Switch: '<S6>/Switch1' incorporates:
       *  Constant: '<S6>/Constant7'
       *  Merge: '<S4>/Merge'
       */
      rtDW.Merge = 0.0;
    } else {
      /* Merge: '<S4>/Merge' incorporates:
       *  Switch: '<S6>/Switch1'
       */
      rtDW.Merge = 2.0;
    }

    /* End of Switch: '<S6>/Switch2' */
    /* End of Outputs for SubSystem: '<S4>/Maneuver' */
  } else if (rtb_UnitDelay == 3.0) {
    /* Outputs for IfAction SubSystem: '<S4>/Standby' incorporates:
     *  ActionPort: '<S8>/Action Port'
     */
    /* Switch: '<S8>/Switch2' incorporates:
     *  Inport: '<Root>/apfail'
     *  Inport: '<Root>/standby'
     *  Logic: '<S8>/Logical Operator12'
     *  Switch: '<S8>/Switch1'
     */
    if (rtU.apfail) {
      /* Merge: '<S4>/Merge' incorporates:
       *  Constant: '<S8>/Constant1'
       */
      rtDW.Merge = 2.0;
    } else if (!rtU.standby) {
      /* Switch: '<S8>/Switch1' incorporates:
       *  Constant: '<S8>/Constant7'
       *  Merge: '<S4>/Merge'
       */
      rtDW.Merge = 0.0;
    } else {
      /* Merge: '<S4>/Merge' incorporates:
       *  Switch: '<S8>/Switch1'
       */
      rtDW.Merge = 3.0;
    }

    /* End of Switch: '<S8>/Switch2' */
    /* End of Outputs for SubSystem: '<S4>/Standby' */
  }

  /* End of If: '<S4>/If' */

  /* UnitDelay: '<S1>/Unit Delay1' */
  rtb_UnitDelay = rtDW.UnitDelay1_DSTATE;

  /* If: '<S5>/If' incorporates:
   *  Constant: '<S10>/Constant10'
   *  Constant: '<S10>/Constant11'
   *  Constant: '<S10>/Constant9'
   *  Constant: '<S11>/Constant3'
   *  Constant: '<S11>/Constant4'
   *  Constant: '<S11>/Constant5'
   *  Constant: '<S12>/Constant1'
   *  Constant: '<S12>/Constant11'
   *  Constant: '<S12>/Constant9'
   *  Constant: '<S13>/Constant16'
   *  Constant: '<S13>/Constant17'
   *  Constant: '<S13>/Constant18'
   *  Merge: '<S5>/Merge'
   */
  if (rtDW.Merge == 0.0) {
    /* Outputs for IfAction SubSystem: '<S5>/Transition' incorporates:
     *  ActionPort: '<S13>/Action Port'
     */
    rtDW.Merge_p[0] = false;
    rtDW.Merge_p[1] = true;
    rtDW.Merge_p[2] = false;

    /* End of Outputs for SubSystem: '<S5>/Transition' */
  } else if (rtDW.Merge == 1.0) {
    /* Outputs for IfAction SubSystem: '<S5>/Nominal' incorporates:
     *  ActionPort: '<S11>/Action Port'
     */
    rtDW.Merge_p[0] = true;
    rtDW.Merge_p[1] = true;
    rtDW.Merge_p[2] = false;

    /* End of Outputs for SubSystem: '<S5>/Nominal' */
  } else if (rtDW.Merge == 2.0) {
    /* Outputs for IfAction SubSystem: '<S5>/Maneuver' incorporates:
     *  ActionPort: '<S10>/Action Port'
     */
    rtDW.Merge_p[1] = true;
    rtDW.Merge_p[2] = true;
    rtDW.Merge_p[0] = true;

    /* End of Outputs for SubSystem: '<S5>/Maneuver' */
  } else if (rtDW.Merge == 3.0) {
    /* Outputs for IfAction SubSystem: '<S5>/Standby' incorporates:
     *  ActionPort: '<S12>/Action Port'
     */
    rtDW.Merge_p[1] = false;
    rtDW.Merge_p[2] = false;
    rtDW.Merge_p[0] = true;

    /* End of Outputs for SubSystem: '<S5>/Standby' */
  }

  /* End of If: '<S5>/If' */

  /* If: '<S14>/If' */
  if (rtb_UnitDelay == 0.0) {
    /* Outputs for IfAction SubSystem: '<S14>/Nominal' incorporates:
     *  ActionPort: '<S17>/Action Port'
     */
    /* Switch: '<S17>/Switch2' incorporates:
     *  Inport: '<Root>/limits'
     *  Logic: '<S17>/Logical Operator12'
     *  Switch: '<S17>/Switch1'
     */
    if (rtU.limits) {
      /* Merge: '<S14>/Merge' incorporates:
       *  Constant: '<S17>/Constant1'
       */
      rtDW.Merge_g = 2.0;
    } else if (!rtDW.Merge_p[1]) {
      /* Switch: '<S17>/Switch1' incorporates:
       *  Constant: '<S17>/Constant7'
       *  Merge: '<S14>/Merge'
       */
      rtDW.Merge_g = 1.0;
    } else {
      /* Merge: '<S14>/Merge' incorporates:
       *  Switch: '<S17>/Switch1'
       */
      rtDW.Merge_g = rtb_UnitDelay;
    }

    /* End of Switch: '<S17>/Switch2' */
    /* End of Outputs for SubSystem: '<S14>/Nominal' */
  } else if (rtb_UnitDelay == 1.0) {
    /* Outputs for IfAction SubSystem: '<S14>/Transition' incorporates:
     *  ActionPort: '<S18>/Action Port'
     */
    /* Switch: '<S18>/Switch1' incorporates:
     *  Logic: '<S18>/Logical Operator12'
     */
    if (rtDW.Merge_p[0] && rtDW.Merge_p[1]) {
      /* Merge: '<S14>/Merge' incorporates:
       *  Constant: '<S18>/Constant7'
       *  SignalConversion: '<S18>/Signal Conversion'
       */
      rtDW.Merge_g = 0.0;
    } else {
      /* Merge: '<S14>/Merge' incorporates:
       *  SignalConversion: '<S18>/Signal Conversion'
       */
      rtDW.Merge_g = 1.0;
    }

    /* End of Switch: '<S18>/Switch1' */
    /* End of Outputs for SubSystem: '<S14>/Transition' */
  } else if (rtb_UnitDelay == 2.0) {
    /* Outputs for IfAction SubSystem: '<S14>/Fault' incorporates:
     *  ActionPort: '<S16>/Action Port'
     */
    /* Switch: '<S16>/Switch1' incorporates:
     *  Inport: '<Root>/limits'
     *  Logic: '<S16>/Logical Operator12'
     *  Logic: '<S16>/Logical Operator2'
     *  Logic: '<S16>/Logical Operator3'
     */
    if ((!rtDW.Merge_p[1]) || (!rtU.limits)) {
      /* Merge: '<S14>/Merge' incorporates:
       *  Constant: '<S16>/Constant7'
       *  SignalConversion: '<S16>/Signal Conversion'
       */
      rtDW.Merge_g = 1.0;
    } else {
      /* Merge: '<S14>/Merge' incorporates:
       *  SignalConversion: '<S16>/Signal Conversion'
       */
      rtDW.Merge_g = 2.0;
    }

    /* End of Switch: '<S16>/Switch1' */
    /* End of Outputs for SubSystem: '<S14>/Fault' */
  }

  /* End of If: '<S14>/If' */

  /* Outport: '<Root>/SENSTATE' */
  rtY.SENSTATE = rtDW.Merge_g;

  /* Outport: '<Root>/pullup' */
  rtY.pullup = rtDW.Merge_p[2];

  /* Outport: '<Root>/STATE' */
  rtY.STATE = rtDW.Merge;

  /* Update for UnitDelay: '<S1>/Unit Delay' */
  rtDW.UnitDelay_DSTATE = rtDW.Merge;

  /* Update for UnitDelay: '<S1>/Unit Delay2' incorporates:
   *  Constant: '<S15>/Constant6'
   *  RelationalOperator: '<S15>/Relational Operator5'
   */
  rtDW.UnitDelay2_DSTATE = !(rtDW.Merge_g == 2.0);

  /* Update for UnitDelay: '<S1>/Unit Delay1' */
  rtDW.UnitDelay1_DSTATE = rtDW.Merge_g;
}

/* Model initialize function */
void fsm_12B_global_initialize(void)
{
  /* InitializeConditions for UnitDelay: '<S1>/Unit Delay2' */
  rtDW.UnitDelay2_DSTATE = true;
}

/*
 * File trailer for generated code.
 *
 * [EOF]
 */
"
