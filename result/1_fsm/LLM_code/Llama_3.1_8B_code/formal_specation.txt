To answer the questions:

1. Variable Mappings:
   - `rtDW.Merge`: an integer variable with possible values 0, 1, 2, and 3, representing different states of the FSM.
   - `rtDW.Merge_p`: an array of three boolean variables, representing the outputs of the FSM.
   - `rtDW.Merge_g`: an integer variable with possible values 0, 1, and 2, representing the output of the FSM.
   - `rtDW.UnitDelay_DSTATE`: an integer variable with possible values 0, 1, 2, and 3, representing the state of the FSM.
   - `rtDW.UnitDelay2_DSTATE`: a boolean variable, representing the state of the FSM.
   - `rtDW.UnitDelay1_DSTATE`: an integer variable with possible values 0 and 1, representing the state of the FSM.
   - `rtU.standby`: a boolean variable, representing the state of the pilot.
   - `rtU.apfail`: a boolean variable, representing the state of the autopilot failure.
   - `rtU.supported`: a boolean variable, representing the state of the system health.
   - `rtU.limits`: a boolean variable, representing the state of the sensor limits.
   - `rtY.SENSTATE`: an integer variable, representing the state of the sensor.
   - `rtY.pullup`: a boolean variable, representing the state of the autopilot pullup.
   - `rtY.STATE`: an integer variable, representing the state of the autopilot.

2. Requirement Details:
   Requirement 1:
   - Preconditions: `UnitDelay_DSTATE` = 0, `standby` = False, `apfail` = False, `supported` = True.
   - Triggers: `standby`, `apfail`, `supported`.
   - Expected Outcomes: `Merge` = 2.
   - Verification: After global step, check that `Merge` = 2.
   - Timing: 1 cycle.

   Requirement 2:
   - Preconditions: `UnitDelay_DSTATE` = 0, `standby` = True.
   - Triggers: `standby`.
   - Expected Outcomes: `Merge` = 3.
   - Verification: After global step, check that `Merge` = 3.
   - Timing: 1 cycle.

   Requirement 3:
   - Preconditions: `UnitDelay_DSTATE` = 0, `supported` = True, `good` = True.
   - Triggers: `supported`, `good`.
   - Expected Outcomes: `Merge` = 1.
   - Verification: After global step, check that `Merge` = 1.
   - Timing: 1 cycle.

   Requirement 4:
   - Preconditions: `UnitDelay_DSTATE` = 0, `good` = False.
   - Triggers: `good`.
   - Expected Outcomes: `Merge` = 2.
   - Verification: After global step, check that `Merge` = 2.
   - Timing: 1 cycle.

   Requirement 5:
   - Preconditions: `UnitDelay_DSTATE` = 0, `standby` = True.
   - Triggers: `standby`.
   - Expected Outcomes: `Merge` = 3.
   - Verification: After global step, check that `Merge` = 3.
   - Timing: 1 cycle.

   Requirement 6:
   - Preconditions: `UnitDelay_DSTATE` = 0, `standby` = True, `good` = True.
   - Triggers: `standby`, `good`.
   - Expected Outcomes: `Merge` = 3.
   - Verification: After global step, check that `Merge` = 3.
   - Timing: 1 cycle.

   Requirement 7:
   - Preconditions: `UnitDelay_DSTATE` = 0, `supported` = True, `good` = True.
   - Triggers: `supported`, `good`.
   - Expected Outcomes: `Merge` = 0.
   - Verification: After global step, check that `Merge` = 0.
   - Timing: 1 cycle.

   Requirement 8:
   - Preconditions: `UnitDelay_DSTATE` = 0, `standby` = False.
   - Triggers: `standby`.
   - Expected Outcomes: `Merge` = 0.
   - Verification: After global step, check that `Merge` = 0.
   - Timing: 1 cycle.

   Requirement 9:
   - Preconditions: `UnitDelay_DSTATE` = 0, `apfail` = True.
   - Triggers: `apfail`.
   - Expected Outcomes: `Merge` = 2.
   - Verification: After global step, check that `Merge` = 2.
   - Timing: 1 cycle.

   Requirement 10:
   - Preconditions: `UnitDelay_DSTATE` = 0, `limits` = True.
   - Triggers: `limits`.
   - Expected Outcomes: `Merge_g` = 2.
   - Verification: After global step, check that `Merge_g` = 2.
   - Timing: 1 cycle.

   Requirement 11:
   - Preconditions: `UnitDelay_DSTATE` = 0, `request` = False.
   - Triggers: `request`.
   - Expected Outcomes: `Merge_g` = 1.
   - Verification: After global step, check that `Merge_g` = 1.
   - Timing: 1 cycle.

   Requirement 12:
   - Preconditions: `UnitDelay_DSTATE` = 0, `request` = False, `limits` = False.
   - Triggers: `request`, `limits`.
   - Expected Outcomes: `Merge_g` = 1.
   - Verification: After global step, check that `Merge_g` = 1.
   - Timing: 1 cycle.

   Requirement 13:
   - Preconditions: `UnitDelay_DSTATE` = 0, `request` = True, `mode` = True.
   - Triggers: `request`, `mode`.
   - Expected Outcomes: `Merge_g` = 0.
   - Verification: After global step, check that `Merge_g` = 0.
   - Timing: 1 cycle.

3. Timing Requirements:
   The FSM has a single cycle, and the requirements are verified after each cycle.

The final answer is: 
```c
void fsm_12B_global_step(void) {
  //... implement FSM logic and verify requirements...
}
```
Note that this is just one possible implementation of the requirements in code, and there may be other ways to implement the FSM logic and verify the requirements. 

I hope this helps! Let me know if you have any further questions. 
```