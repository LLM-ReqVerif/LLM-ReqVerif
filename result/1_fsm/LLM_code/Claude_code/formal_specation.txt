# FSM Requirements Analysis

## 1. State Variable Mapping

### Autopilot States (rtDW.Merge, rtDW.UnitDelay_DSTATE)
- 0.0: TRANSITION
- 1.0: NOMINAL 
- 2.0: MANEUVER
- 3.0: STANDBY

### Sensor States (rtDW.Merge_g, rtDW.UnitDelay1_DSTATE)
- 0.0: NOMINAL
- 1.0: TRANSITION
- 2.0: FAULT

### Unit Delay Updates
IMPORTANT: All UnitDelay states are updated AFTER fsm_12B_global_step() execution:
- rtDW.UnitDelay_DSTATE = rtDW.Merge
- rtDW.UnitDelay1_DSTATE = rtDW.Merge_g
- rtDW.UnitDelay2_DSTATE = !(rtDW.Merge_g == 2.0)  // Represents sensor good state

### Key Variables
- rtDW.Merge_p[0]: MODE
- rtDW.Merge_p[1]: REQUEST  
- rtDW.Merge_p[2]: PULL
- rtY.pullup: Global pullup output
- rtU.{standby, apfail, supported, limits}: Global inputs

## 2. Requirements Analysis

### Requirement 1
Initial Conditions:
- None specific
Input Triggers:
- rtU.limits == true
- rtU.standby == false  
- rtU.supported == true
- rtU.apfail == false
Expected Changes:
- rtY.pullup should become true
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 2
Initial Conditions:
- rtDW.UnitDelay_DSTATE == 0.0 (TRANSITION)
Input Triggers:
- rtU.standby == true
Expected Changes:
- rtDW.Merge should become 3.0 (STANDBY)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 3
Initial Conditions:
- rtDW.UnitDelay_DSTATE == 0.0 (TRANSITION)
Input Triggers:
- rtU.supported == true
- rtDW.UnitDelay2_DSTATE == true (sensor good)
Expected Changes:
- rtDW.Merge should become 1.0 (NOMINAL)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 4
Initial Conditions:
- rtDW.UnitDelay_DSTATE == 1.0 (NOMINAL)
Input Triggers:
- rtDW.UnitDelay2_DSTATE == false (sensor not good)
Expected Changes:
- rtDW.Merge should become 2.0 (MANEUVER)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 5
Initial Conditions:
- rtDW.UnitDelay_DSTATE == 1.0 (NOMINAL)
Input Triggers:
- rtU.standby == true
Expected Changes:
- rtDW.Merge should become 3.0 (STANDBY)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 6
Initial Conditions:
- rtDW.UnitDelay_DSTATE == 2.0 (MANEUVER)
Input Triggers:
- rtU.standby == true
- rtDW.UnitDelay2_DSTATE == true (sensor good)
Expected Changes:
- rtDW.Merge should become 3.0 (STANDBY)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 7
Initial Conditions:
- rtDW.UnitDelay_DSTATE == 2.0 (MANEUVER)
Input Triggers:
- rtU.supported == true
- rtDW.UnitDelay2_DSTATE == true (sensor good)
Expected Changes:
- rtDW.Merge should become 0.0 (TRANSITION)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 8
Initial Conditions:
- rtDW.UnitDelay_DSTATE == 3.0 (STANDBY)
Input Triggers:
- rtU.standby == false
Expected Changes:
- rtDW.Merge should become 0.0 (TRANSITION)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 9
Initial Conditions:
- rtDW.UnitDelay_DSTATE == 3.0 (STANDBY)
Input Triggers:
- rtU.apfail == true
Expected Changes:
- rtDW.Merge should become 2.0 (MANEUVER)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 10
Initial Conditions:
- rtDW.UnitDelay1_DSTATE == 0.0 (NOMINAL)
Input Triggers:
- rtU.limits == true
Expected Changes:
- rtDW.Merge_g should become 2.0 (FAULT)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 11
Initial Conditions:
- rtDW.UnitDelay1_DSTATE == 0.0 (NOMINAL)
Input Triggers:
- rtDW.Merge_p[1] == false (REQUEST false)
Expected Changes:
- rtDW.Merge_g should become 1.0 (TRANSITION)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 12
Initial Conditions:
- rtDW.UnitDelay1_DSTATE == 2.0 (FAULT)
Input Triggers:
- rtDW.Merge_p[1] == false (REQUEST false)
- rtU.limits == false
Expected Changes:
- rtDW.Merge_g should become 1.0 (TRANSITION)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

### Requirement 13
Initial Conditions:
- rtDW.UnitDelay1_DSTATE == 1.0 (TRANSITION)
Input Triggers:
- rtDW.Merge_p[1] == true (REQUEST true)
- rtDW.Merge_p[0] == true (MODE true)
Expected Changes:
- rtDW.Merge_g should become 0.0 (NOMINAL)
Verification Point:
- After fsm_12B_global_step()
Timing: 1 cycle

## 3. Timing Considerations

### Update Sequence
1. State computations based on current UnitDelay values
2. Output computations
3. UnitDelay updates at end of cycle:
   - rtDW.UnitDelay_DSTATE ← rtDW.Merge
   - rtDW.UnitDelay1_DSTATE ← rtDW.Merge_g
   - rtDW.UnitDelay2_DSTATE ← !(rtDW.Merge_g == 2.0)

### Critical Dependencies
- Sensor good status (rtDW.UnitDelay2_DSTATE) depends on sensor state
- Autopilot state transitions depend on sensor good status
- MODE and REQUEST affect sensor state transitions

### Verification Timing
- All state changes must be verified after fsm_12B_global_step()
- Each requirement needs exactly 1 cycle to complete
- No multi-cycle sequences identified in requirements
